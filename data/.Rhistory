p2 <-  plot_ly(position.pt6, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,split=~participant,showlegend = F)
p3 <-  plot_ly(position.pt8, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,split=~participant,showlegend = F)
p4 <-  plot_ly(position.pt9, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,split=~participant,showlegend = F)
# p5 <-  plot_ly(position.pt3, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,split=~participant,showlegend = F)
# p6 <-  plot_ly(position.pt3, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,split=~participant,showlegend = F)
# p7 <-  plot_ly(position.pt3, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,split=~participant,showlegend = F)
# p8 <-  plot_ly(position.pt3, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,split=~participant,showlegend = F)
# p9 <-  plot_ly(position.pt3, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,split=~participant,showlegend = F)
# p2 <-  plot_ly(position.df.clean, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,split=~participant,showlegend = F)
# p2 <-  plot_ly(position.df.clean, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,split=~participant,showlegend = F)
# p2 <-  plot_ly(position.df.clean, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,split=~participant,showlegend = F)
# p2 <-  plot_ly(position.df.clean, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,split=~participant,showlegend = F)
# p2 <-  plot_ly(position.df.clean, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,split=~participant,showlegend = F)
# p2 <-  plot_ly(position.df.clean, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,split=~participant,showlegend = F)
subplot(p1,p2,p3,p4, nrows = 4, shareX = F, shareY = F)
library(htmltools)
p <- plot_ly(position.pt25, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red"))
# NOTE: you don't need browsable() in rmarkdown, but you do at the R prompt
browsable(div(
style = "display: flex; flex-wrap: wrap; justify-content: center",
div(p1, style = "width: 40%; border: solid;"),
div(p2, style = "width: 40%; border: solid;"),
div(p3, style = "width: 40%; border: solid;"),
div(p4, style = "width: 40%; border: solid;"),
div(p5, style = "width: 40%; border: solid;"),
div(p6, style = "width: 40%; border: solid;"),
div(p7, style = "width: 40%; border: solid;"),
div(p8, style = "width: 40%; border: solid;"),
div(p9, style = "width: 40%; border: solid;"),
div(p10, style = "width: 40%; border: solid;"),
div(p11, style = "width: 40%; border: solid;"),
div(p12, style = "width: 40%; border: solid;"),
div(p13, style = "width: 40%; border: solid;"),
div(p14, style = "width: 40%; border: solid;"),
div(p15, style = "width: 40%; border: solid;"),
div(p16, style = "width: 40%; border: solid;")
))
p1 <- plot_ly(position.pt3, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red")) %>%
add_markers() %>%
add_annotations(
x= 0.5,
y= 1,
text = "<b>Participant 3</b>",
showarrow = F
) %>%
layout(scene = list(xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Floor')))
p2 <- plotly::plot_ly(position.pt6, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red")) %>%
add_markers() %>%
add_annotations(
x= 0.5,
y= 1,
text = "<b>Participant 6</b>",
showarrow = F
) %>%
layout(scene = list(xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Floor')))
p3 <- plotly::plot_ly(position.pt8, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red")) %>%
add_markers() %>%
add_annotations(
x= 0.5,
y= 1,
text = "<b>Participant 8</b>",
showarrow = F
) %>%
layout(scene = list(xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Floor')))
p4 <- plotly::plot_ly(position.pt9, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red")) %>%
add_markers() %>%
add_annotations(
x= 0.5,
y= 1,
text = "<b>Participant 9</b>",
showarrow = F
) %>%
layout(scene = list(xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Floor')))
p5 <- plotly::plot_ly(position.pt11, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red")) %>%
add_markers() %>%
add_annotations(
x= 0.5,
y= 1,
text = "<b>Participant 11</b>",
showarrow = F
) %>%
layout(scene = list(xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Floor')))
p6 <- plotly::plot_ly(position.pt12, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red")) %>%
add_markers() %>%
add_annotations(
x= 0.5,
y= 1,
text = "<b>Participant 12</b>",
showarrow = F
) %>%
layout(scene = list(xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Floor')))
p7 <- plotly::plot_ly(position.pt13, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red")) %>%
add_markers() %>%
add_annotations(
x= 0.5,
y= 1,
text = "<b>Participant 13</b>",
showarrow = F
) %>%
layout(scene = list(xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Floor')))
p8 <- plotly::plot_ly(position.pt14, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red")) %>%
add_markers() %>%
add_annotations(
x= 0.5,
y= 1,
text = "<b>Participant 14</b>",
showarrow = F
) %>%
layout(scene = list(xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Floor')))
p9 <- plotly::plot_ly(position.pt16, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red")) %>%
add_markers() %>%
add_annotations(
x= 0.5,
y= 1,
text = "<b>Participant 16</b>",
showarrow = F
) %>%
layout(scene = list(xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Floor')))
p10 <- plotly::plot_ly(position.pt18, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red")) %>%
add_markers() %>%
add_annotations(
x= 0.5,
y= 1,
text = "<b>Participant 18</b>",
showarrow = F
) %>%
layout(scene = list(xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Floor')))
p11 <- plotly::plot_ly(position.pt20, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red")) %>%
add_markers() %>%
add_annotations(
x= 0.5,
y= 1,
text = "<b>Participant 20</b>",
showarrow = F
) %>%
layout(scene = list(xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Floor')))
p12 <- plotly::plot_ly(position.pt21, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red")) %>%
add_markers() %>%
add_annotations(
x= 0.5,
y= 1,
text = "<b>Participant 21</b>",
showarrow = F
) %>%
layout(scene = list(xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Floor')))
p13 <- plotly::plot_ly(position.pt22, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red")) %>%
add_markers() %>%
add_annotations(
x= 0.5,
y= 1,
text = "<b>Participant 22</b>",
showarrow = F
) %>%
layout(scene = list(xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Floor')))
p14 <- plotly::plot_ly(position.pt23, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red")) %>%
add_markers() %>%
add_annotations(
x= 0.5,
y= 1,
text = "<b>Participant 23</b>",
showarrow = F
) %>%
layout(scene = list(xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Floor')))
p15 <- plotly::plot_ly(position.pt24, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red")) %>%
add_markers() %>%
add_annotations(
x= 0.5,
y= 1,
text = "<b>Participant 24</b>",
showarrow = F
) %>%
layout(scene = list(xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Floor')))
p16 <- plotly::plot_ly(position.pt25, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
color = ~conductance_z, colors=c("blue","red")) %>%
add_markers() %>%
add_annotations(
x= 0.5,
y= 1,
text = "<b>Participant 25</b>",
showarrow = F
) %>%
layout(scene = list(xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Floor')))
library(htmltools)
# p <- plot_ly(position.pt25, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
#              color = ~conductance_z, colors=c("blue","red"))
# NOTE: you don't need browsable() in rmarkdown, but you do at the R prompt
browsable(div(
style = "display: flex; flex-wrap: wrap; justify-content: center",
div(p1, style = "width: 40%; border: solid;"),
div(p2, style = "width: 40%; border: solid;"),
div(p3, style = "width: 40%; border: solid;"),
div(p4, style = "width: 40%; border: solid;"),
div(p5, style = "width: 40%; border: solid;"),
div(p6, style = "width: 40%; border: solid;"),
div(p7, style = "width: 40%; border: solid;"),
div(p8, style = "width: 40%; border: solid;"),
div(p9, style = "width: 40%; border: solid;"),
div(p10, style = "width: 40%; border: solid;"),
div(p11, style = "width: 40%; border: solid;"),
div(p12, style = "width: 40%; border: solid;"),
div(p13, style = "width: 40%; border: solid;"),
div(p14, style = "width: 40%; border: solid;"),
div(p15, style = "width: 40%; border: solid;"),
div(p16, style = "width: 40%; border: solid;")
))
library(htmltools)
# p <- plot_ly(position.pt25, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
#              color = ~conductance_z, colors=c("blue","red"))
# NOTE: you don't need browsable() in rmarkdown, but you do at the R prompt
browsable(div(
style = "display: flex; flex-wrap: wrap; justify-content: center",
div(p1, style = "width: 30%; border: solid;"),
div(p2, style = "width: 30%; border: solid;"),
div(p3, style = "width: 30%; border: solid;"),
div(p4, style = "width: 30%; border: solid;"),
div(p5, style = "width: 30%; border: solid;"),
div(p6, style = "width: 30%; border: solid;"),
div(p7, style = "width: 30%; border: solid;"),
div(p8, style = "width: 30%; border: solid;"),
div(p9, style = "width: 30%; border: solid;"),
div(p10, style = "width: 30%; border: solid;"),
div(p11, style = "width: 30%; border: solid;"),
div(p12, style = "width: 30%; border: solid;"),
div(p13, style = "width: 30%; border: solid;"),
div(p14, style = "width: 30%; border: solid;"),
div(p15, style = "width: 30%; border: solid;"),
div(p16, style = "width: 30%; border: solid;")
))
library(htmltools)
# p <- plot_ly(position.pt25, x = ~FINAL_X, y = ~FINAL_Y, z = ~floor,
#              color = ~conductance_z, colors=c("blue","red"))
# NOTE: you don't need browsable() in rmarkdown, but you do at the R prompt
chart_link = api_create(browsable(div(
style = "display: flex; flex-wrap: wrap; justify-content: center",
div(p1, style = "width: 30%; border: solid;"),
div(p2, style = "width: 30%; border: solid;"),
div(p3, style = "width: 30%; border: solid;"),
div(p4, style = "width: 30%; border: solid;"),
div(p5, style = "width: 30%; border: solid;"),
div(p6, style = "width: 30%; border: solid;"),
div(p7, style = "width: 30%; border: solid;"),
div(p8, style = "width: 30%; border: solid;"),
div(p9, style = "width: 30%; border: solid;"),
div(p10, style = "width: 30%; border: solid;"),
div(p11, style = "width: 30%; border: solid;"),
div(p12, style = "width: 30%; border: solid;"),
div(p13, style = "width: 30%; border: solid;"),
div(p14, style = "width: 30%; border: solid;"),
div(p15, style = "width: 30%; border: solid;"),
div(p16, style = "width: 30%; border: solid;")
)), filename="indoor_plots_allpts")
pfin<-browsable(div(
style = "display: flex; flex-wrap: wrap; justify-content: center",
div(p1, style = "width: 30%; border: solid;"),
div(p2, style = "width: 30%; border: solid;"),
div(p3, style = "width: 30%; border: solid;"),
div(p4, style = "width: 30%; border: solid;"),
div(p5, style = "width: 30%; border: solid;"),
div(p6, style = "width: 30%; border: solid;"),
div(p7, style = "width: 30%; border: solid;"),
div(p8, style = "width: 30%; border: solid;"),
div(p9, style = "width: 30%; border: solid;"),
div(p10, style = "width: 30%; border: solid;"),
div(p11, style = "width: 30%; border: solid;"),
div(p12, style = "width: 30%; border: solid;"),
div(p13, style = "width: 30%; border: solid;"),
div(p14, style = "width: 30%; border: solid;"),
div(p15, style = "width: 30%; border: solid;"),
div(p16, style = "width: 30%; border: solid;")
))
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(pfin, filename="indoor_plots_allpts")
chart_link
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(pfin, filename="indoor_plots_allpts")
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly::api_create(pfin, filename="indoor_plots_allpts")
htmltools::print(browsable(div(
style = "display: flex; flex-wrap: wrap; justify-content: center",
div(p1, style = "width: 30%; border: solid;"),
div(p2, style = "width: 30%; border: solid;"),
div(p3, style = "width: 30%; border: solid;"),
div(p4, style = "width: 30%; border: solid;"),
div(p5, style = "width: 30%; border: solid;"),
div(p6, style = "width: 30%; border: solid;"),
div(p7, style = "width: 30%; border: solid;"),
div(p8, style = "width: 30%; border: solid;"),
div(p9, style = "width: 30%; border: solid;"),
div(p10, style = "width: 30%; border: solid;"),
div(p11, style = "width: 30%; border: solid;"),
div(p12, style = "width: 30%; border: solid;"),
div(p13, style = "width: 30%; border: solid;"),
div(p14, style = "width: 30%; border: solid;"),
div(p15, style = "width: 30%; border: solid;"),
div(p16, style = "width: 30%; border: solid;")
)))
pfin<-browsable(div(
style = "display: flex; flex-wrap: wrap; justify-content: center",
div(p1, style = "width: 30%; border: solid;"),
div(p2, style = "width: 30%; border: solid;"),
div(p3, style = "width: 30%; border: solid;"),
div(p4, style = "width: 30%; border: solid;"),
div(p5, style = "width: 30%; border: solid;"),
div(p6, style = "width: 30%; border: solid;"),
div(p7, style = "width: 30%; border: solid;"),
div(p8, style = "width: 30%; border: solid;"),
div(p9, style = "width: 30%; border: solid;"),
div(p10, style = "width: 30%; border: solid;"),
div(p11, style = "width: 30%; border: solid;"),
div(p12, style = "width: 30%; border: solid;"),
div(p13, style = "width: 30%; border: solid;"),
div(p14, style = "width: 30%; border: solid;"),
div(p15, style = "width: 30%; border: solid;"),
div(p16, style = "width: 30%; border: solid;")
))
print(pfin, browse = is.browsable(pfin))
print(pfin, browse = is.browsable(pfin))
print(pfin, browse = is.browsable(T))
html_tag <- print(pfin, browse = is.browsable(T))
View(html_tag)
html_tag <- print(pfin, browse = is.browsable(T))
code <- paste(as.character(html_tag), collapse = "\n")
write.table(code,
file='plotly_result.html',
quote = FALSE,
col.names = FALSE,
row.names = FALSE)
write.table(code,
file='/Users/garrettmillar/Desktop/Nuenen/plotly_result.html',
quote = FALSE,
col.names = FALSE,
row.names = FALSE)
write.table(code,
file='/Users/garrettmillar/Desktop/Nuenen/plotly_result.html')
code <- paste(as.character(html_tag))
write.table(code,
file='/Users/garrettmillar/Desktop/Nuenen/plotly_result.html')
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly::api_create(code, filename="indoor_plots_allpts")
code <- paste(as_widget(html_tag))
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly::api_create(code, filename="indoor_plots_allpts")
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly::api_create(html_tag, filename="indoor_plots_allpts")
save_html(pfin, '/Users/garrettmillar/Desktop/Nuenen/plotly_result.html', background = "white", libdir = "lib")
save_html(html_tag, 'plotly_result.html', background = "white", libdir = "lib")
plotly::api_create(html_tag, filename="indoor_plots_allpts")
pfin<-browsable(div(
style = "display: flex; flex-wrap: wrap; justify-content: center",
div(p1, style = "width: 30%; border: none;"),
div(p2, style = "width: 30%; border: none;"),
div(p3, style = "width: 30%; border: none;"),
div(p4, style = "width: 30%; border: none;"),
div(p5, style = "width: 30%; border: none;"),
div(p6, style = "width: 30%; border: none;"),
div(p7, style = "width: 30%; border: none;"),
div(p8, style = "width: 30%; border: none;"),
div(p9, style = "width: 30%; border: none;"),
div(p10, style = "width: 30%; border: none;"),
div(p11, style = "width: 30%; border: none;"),
div(p12, style = "width: 30%; border: none;"),
div(p13, style = "width: 30%; border: none;"),
div(p14, style = "width: 30%; border: none;"),
div(p15, style = "width: 30%; border: none;"),
div(p16, style = "width: 30%; border: none;")
))
html_tag <- print(pfin, browse = is.browsable(T))
save_html(html_tag, 'plotly_result.html', background = "white", libdir = "lib")
par(mfrow=c(2,6))
for (i in 1:length(firstFLOOR_beacons_RSSI_40.88)) {
hist(firstFLOOR_beacons_RSSI_40.88[,i], main=names(firstFLOOR_beacons_RSSI_40.88[i]))
}
z <- position.df.clean$floor
# z <- z[!z%%1]
x <- position.df.clean$FINAL_X
y <- position.df.clean$FINAL_Y
scatterplot3d(x, y, z, pch = 20, angle = 45,  main = "", zlim=c(min(position.df.clean$floor),
max(position.df.clean$floor)))
pfin<-browsable(div(
style = "display: flex; flex-wrap: wrap; justify-content: center",
div(p1, style = "width: 30%; border: none;"),
div(p2, style = "width: 30%; border: none;"),
div(p3, style = "width: 30%; border: none;"),
div(p4, style = "width: 30%; border: none;"),
div(p5, style = "width: 30%; border: none;"),
div(p6, style = "width: 30%; border: none;"),
div(p7, style = "width: 30%; border: none;"),
div(p8, style = "width: 30%; border: none;"),
div(p9, style = "width: 30%; border: none;"),
div(p10, style = "width: 30%; border: none;"),
div(p11, style = "width: 30%; border: none;"),
div(p12, style = "width: 30%; border: none;"),
div(p13, style = "width: 30%; border: none;"),
div(p14, style = "width: 30%; border: none;"),
div(p15, style = "width: 30%; border: none;"),
div(p16, style = "width: 30%; border: none;")
))
html_tag <- print(pfin, browse = is.browsable(T))
save_html(html_tag, 'plotly_result.html', background = "white", libdir = "lib")
# for Laura
setwd("/Users/garrettmillar/Desktop/AmandaTides/rasters")
# Ensure coordinates are in lat/lon
FL_mask_vect_latlon <- spTransform(FL_mask_vect, CRS("+proj=longlat +datum=WGS84"))
# read in data with rgdal:
FL_mask_vect_latlon <- rgdal::readOGR("/Users/garrettmillar/Desktop/AmandaTides/rasters/FL_mask_vect_latlon", "OGRGeoJSON")
# Ensure coordinates are in lat/lon
FL_mask_vect_latlon <- spTransform(FL_mask_vect, CRS("+proj=longlat +datum=WGS84"))
# Ensure coordinates are in lat/lon
FL_mask_vect_latlon <- spTransform(FL_mask_vect_latlon, CRS("+proj=longlat +datum=WGS84"))
# Export to geojson
writeOGR(FL_mask_vect_latlon, "FL_mask_vect_latlon", layer="FL_mask_vect_latlon", driver="GeoJSON")
# for Laura
setwd("/Users/garrettmillar/mapbox-workshop/data")
# read in data with rgdal:
Raleigh_zoning_shp.json <- rgdal::readOGR("/Users/garrettmillar/mapbox-workshop/data/java.log.json", "OGRGeoJSON")
# Ensure coordinates are in lat/lon
Raleigh_zoning_shp.json <- spTransform(Raleigh_zoning_shp.json, CRS("+proj=longlat +datum=WGS84"))
# Export to geojson
writeOGR(Raleigh_zoning_shp.json, "Raleigh_zoning_shp.json", layer="Raleigh_zoning_shp.json", driver="GeoJSON")
Raleigh_zoning_shp.json
CRS(Raleigh_zoning_shp.json )
# check if data has defined CRS
proj4string(Raleigh_zoning_shp.json)
# check if data has defined CRS
CRS(proj4string(Raleigh_zoning_shp.json))
# it seems ok, but I never trust setting projections in R. So, define (even more) proj info:
proj4string(Raleigh_zoning_shp.json) <- CRS("+init=epsg:4326 +proj=longlat
+ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
# As a: "Why not? I still dont trust you R":
Nuenen_outdoor_sp <- spTransform(Nuenen_outdoor_sp, "+proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +units=m +no_defs")
# Ensure coordinates are in lat/lon. Or: "Why again? Cause I still dont trust you R"
Raleigh_zoning_shp.json <- spTransform(Raleigh_zoning_shp.json, "+init=epsg:4326 +proj=longlat
+ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
summary(Raleigh_zoning_shp.json)
Raleigh_zoning_shp.json@proj4string
# Ensure coordinates are in lat/lon. Or: "Why again? Cause I still dont trust you R"
Raleigh_zoning_shp.json <- spTransform(Raleigh_zoning_shp.json@polygons, "+init=epsg:4326 +proj=longlat
+ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
coordinates(Raleigh_zoning_shp.json)
# Still, don't trust you:
head(coordinates(Raleigh_zoning_shp.json))
# for Laura
setwd("/Users/garrettmillar/mapbox-workshop/data")
# read in data with rgdal:
Raleigh_zoning_shp.json <- rgdal::readOGR("/Users/garrettmillar/mapbox-workshop/data/java.log.json",
"OGRGeoJSON", p4s="+init=epsg:4326 +proj=longlat
+ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
# check if data has defined CRS
CRS(proj4string(Raleigh_zoning_shp.json))
# double check coords
head(coordinates(Raleigh_zoning_shp.json))
Raleigh_zoning_shp.json <- spTransform(coordinates(Raleigh_zoning_shp.json), "+init=epsg:4326 +proj=longlat
+ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
coordinates(Raleigh_zoning_shp.json) <- spTransform(coordinates(Raleigh_zoning_shp.json), "+init=epsg:4326 +proj=longlat
+ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
# trying with BirthPlace
# read in data with rgdal:
BirthPlace.json <- rgdal::readOGR("/Users/garrettmillar/mapbox-workshop/data/BirthPlace.json",
"OGRGeoJSON", p4s="+init=epsg:4326 +proj=longlat
+ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
# check if data has defined CRS
CRS(proj4string(BirthPlace.json))
# double check coords
head(coordinates(BirthPlace.json))
